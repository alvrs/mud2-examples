// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("testing"), bytes16("Grid2DTagger")));
bytes32 constant Grid2DTaggerTableId = _tableId;

struct Grid2DTaggerData {
  uint32[] tagX;
  uint32[] tagY;
  uint128[] timestamp;
}

library Grid2DTagger {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT32_ARRAY;
    _schema[1] = SchemaType.UINT32_ARRAY;
    _schema[2] = SchemaType.UINT128_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "tagX";
    _fieldNames[1] = "tagY";
    _fieldNames[2] = "timestamp";
    return ("Grid2DTagger", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get tagX */
  function getTagX(address tagger) internal view returns (uint32[] memory tagX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get tagX (using the specified store) */
  function getTagX(IStore _store, address tagger) internal view returns (uint32[] memory tagX) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Set tagX */
  function setTagX(address tagger, uint32[] memory tagX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.setField(_tableId, _keyTuple, 0, EncodeArray.encode((tagX)));
  }

  /** Set tagX (using the specified store) */
  function setTagX(IStore _store, address tagger, uint32[] memory tagX) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.setField(_tableId, _keyTuple, 0, EncodeArray.encode((tagX)));
  }

  /** Get the length of tagX */
  function lengthTagX(address tagger) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 0, getSchema());
    return _byteLength / 4;
  }

  /** Get the length of tagX (using the specified store) */
  function lengthTagX(IStore _store, address tagger) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 0, getSchema());
    return _byteLength / 4;
  }

  /** Get an item of tagX (unchecked, returns invalid data if index overflows) */
  function getItemTagX(address tagger, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 0, getSchema(), _index * 4, (_index + 1) * 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get an item of tagX (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemTagX(IStore _store, address tagger, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 0, getSchema(), _index * 4, (_index + 1) * 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Push an element to tagX */
  function pushTagX(address tagger, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.pushToField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /** Push an element to tagX (using the specified store) */
  function pushTagX(IStore _store, address tagger, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.pushToField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /** Pop an element from tagX */
  function popTagX(address tagger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.popFromField(_tableId, _keyTuple, 0, 4);
  }

  /** Pop an element from tagX (using the specified store) */
  function popTagX(IStore _store, address tagger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.popFromField(_tableId, _keyTuple, 0, 4);
  }

  /** Update an element of tagX at `_index` */
  function updateTagX(address tagger, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.updateInField(_tableId, _keyTuple, 0, _index * 4, abi.encodePacked((_element)));
  }

  /** Update an element of tagX (using the specified store) at `_index` */
  function updateTagX(IStore _store, address tagger, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.updateInField(_tableId, _keyTuple, 0, _index * 4, abi.encodePacked((_element)));
  }

  /** Get tagY */
  function getTagY(address tagger) internal view returns (uint32[] memory tagY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get tagY (using the specified store) */
  function getTagY(IStore _store, address tagger) internal view returns (uint32[] memory tagY) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Set tagY */
  function setTagY(address tagger, uint32[] memory tagY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.setField(_tableId, _keyTuple, 1, EncodeArray.encode((tagY)));
  }

  /** Set tagY (using the specified store) */
  function setTagY(IStore _store, address tagger, uint32[] memory tagY) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.setField(_tableId, _keyTuple, 1, EncodeArray.encode((tagY)));
  }

  /** Get the length of tagY */
  function lengthTagY(address tagger) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 4;
  }

  /** Get the length of tagY (using the specified store) */
  function lengthTagY(IStore _store, address tagger) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 4;
  }

  /** Get an item of tagY (unchecked, returns invalid data if index overflows) */
  function getItemTagY(address tagger, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 4, (_index + 1) * 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get an item of tagY (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemTagY(IStore _store, address tagger, uint256 _index) internal view returns (uint32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 4, (_index + 1) * 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Push an element to tagY */
  function pushTagY(address tagger, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /** Push an element to tagY (using the specified store) */
  function pushTagY(IStore _store, address tagger, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /** Pop an element from tagY */
  function popTagY(address tagger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 4);
  }

  /** Pop an element from tagY (using the specified store) */
  function popTagY(IStore _store, address tagger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.popFromField(_tableId, _keyTuple, 1, 4);
  }

  /** Update an element of tagY at `_index` */
  function updateTagY(address tagger, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 4, abi.encodePacked((_element)));
  }

  /** Update an element of tagY (using the specified store) at `_index` */
  function updateTagY(IStore _store, address tagger, uint256 _index, uint32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.updateInField(_tableId, _keyTuple, 1, _index * 4, abi.encodePacked((_element)));
  }

  /** Get timestamp */
  function getTimestamp(address tagger) internal view returns (uint128[] memory timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint128());
  }

  /** Get timestamp (using the specified store) */
  function getTimestamp(IStore _store, address tagger) internal view returns (uint128[] memory timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint128());
  }

  /** Set timestamp */
  function setTimestamp(address tagger, uint128[] memory timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.setField(_tableId, _keyTuple, 2, EncodeArray.encode((timestamp)));
  }

  /** Set timestamp (using the specified store) */
  function setTimestamp(IStore _store, address tagger, uint128[] memory timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.setField(_tableId, _keyTuple, 2, EncodeArray.encode((timestamp)));
  }

  /** Get the length of timestamp */
  function lengthTimestamp(address tagger) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 16;
  }

  /** Get the length of timestamp (using the specified store) */
  function lengthTimestamp(IStore _store, address tagger) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 16;
  }

  /** Get an item of timestamp (unchecked, returns invalid data if index overflows) */
  function getItemTimestamp(address tagger, uint256 _index) internal view returns (uint128) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 16, (_index + 1) * 16);
    return (uint128(Bytes.slice16(_blob, 0)));
  }

  /** Get an item of timestamp (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemTimestamp(IStore _store, address tagger, uint256 _index) internal view returns (uint128) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 16, (_index + 1) * 16);
    return (uint128(Bytes.slice16(_blob, 0)));
  }

  /** Push an element to timestamp */
  function pushTimestamp(address tagger, uint128 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /** Push an element to timestamp (using the specified store) */
  function pushTimestamp(IStore _store, address tagger, uint128 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /** Pop an element from timestamp */
  function popTimestamp(address tagger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 16);
  }

  /** Pop an element from timestamp (using the specified store) */
  function popTimestamp(IStore _store, address tagger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.popFromField(_tableId, _keyTuple, 2, 16);
  }

  /** Update an element of timestamp at `_index` */
  function updateTimestamp(address tagger, uint256 _index, uint128 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 16, abi.encodePacked((_element)));
  }

  /** Update an element of timestamp (using the specified store) at `_index` */
  function updateTimestamp(IStore _store, address tagger, uint256 _index, uint128 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.updateInField(_tableId, _keyTuple, 2, _index * 16, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(address tagger) internal view returns (Grid2DTaggerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, address tagger) internal view returns (Grid2DTaggerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(address tagger, uint32[] memory tagX, uint32[] memory tagY, uint128[] memory timestamp) internal {
    bytes memory _data = encode(tagX, tagY, timestamp);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    address tagger,
    uint32[] memory tagX,
    uint32[] memory tagY,
    uint128[] memory timestamp
  ) internal {
    bytes memory _data = encode(tagX, tagY, timestamp);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(address tagger, Grid2DTaggerData memory _table) internal {
    set(tagger, _table.tagX, _table.tagY, _table.timestamp);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, address tagger, Grid2DTaggerData memory _table) internal {
    set(_store, tagger, _table.tagX, _table.tagY, _table.timestamp);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (Grid2DTaggerData memory _table) {
    // 0 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 0));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 0) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 32;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.tagX = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.tagY = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

      _start = _end;
      _end += _encodedLengths.atIndex(2);
      _table.timestamp = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint128());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32[] memory tagX,
    uint32[] memory tagY,
    uint128[] memory timestamp
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](3);
    _counters[0] = uint40(tagX.length * 4);
    _counters[1] = uint40(tagY.length * 4);
    _counters[2] = uint40(timestamp.length * 16);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        _encodedLengths.unwrap(),
        EncodeArray.encode((tagX)),
        EncodeArray.encode((tagY)),
        EncodeArray.encode((timestamp))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(address tagger) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));
  }

  /* Delete all data for given keys */
  function deleteRecord(address tagger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, address tagger) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((tagger))));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
