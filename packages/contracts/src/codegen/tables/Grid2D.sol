// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16("testing"), bytes16("Grid2D")));
bytes32 constant Grid2DTableId = _tableId;

struct Grid2DData {
  bool isOccupied;
  bytes data;
  address author;
}

library Grid2D {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.BOOL;
    _schema[1] = SchemaType.BYTES;
    _schema[2] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "isOccupied";
    _fieldNames[1] = "data";
    _fieldNames[2] = "author";
    return ("Grid2D", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get isOccupied */
  function getIsOccupied(uint32 x, uint32 y) internal view returns (bool isOccupied) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get isOccupied (using the specified store) */
  function getIsOccupied(IStore _store, uint32 x, uint32 y) internal view returns (bool isOccupied) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set isOccupied */
  function setIsOccupied(uint32 x, uint32 y, bool isOccupied) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((isOccupied)));
  }

  /** Set isOccupied (using the specified store) */
  function setIsOccupied(IStore _store, uint32 x, uint32 y, bool isOccupied) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((isOccupied)));
  }

  /** Get data */
  function getData(uint32 x, uint32 y) internal view returns (bytes memory data) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Get data (using the specified store) */
  function getData(IStore _store, uint32 x, uint32 y) internal view returns (bytes memory data) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Set data */
  function setData(uint32 x, uint32 y, bytes memory data) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, bytes((data)));
  }

  /** Set data (using the specified store) */
  function setData(IStore _store, uint32 x, uint32 y, bytes memory data) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setField(_tableId, _keyTuple, 1, bytes((data)));
  }

  /** Get the length of data */
  function lengthData(uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of data (using the specified store) */
  function lengthData(IStore _store, uint32 x, uint32 y) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of data (unchecked, returns invalid data if index overflows) */
  function getItemData(uint32 x, uint32 y, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of data (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemData(IStore _store, uint32 x, uint32 y, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to data */
  function pushData(uint32 x, uint32 y, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Push a slice to data (using the specified store) */
  function pushData(IStore _store, uint32 x, uint32 y, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Pop a slice from data */
  function popData(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Pop a slice from data (using the specified store) */
  function popData(IStore _store, uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Update a slice of data at `_index` */
  function updateData(uint32 x, uint32 y, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Update a slice of data (using the specified store) at `_index` */
  function updateData(IStore _store, uint32 x, uint32 y, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Get author */
  function getAuthor(uint32 x, uint32 y) internal view returns (address author) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get author (using the specified store) */
  function getAuthor(IStore _store, uint32 x, uint32 y) internal view returns (address author) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set author */
  function setAuthor(uint32 x, uint32 y, address author) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((author)));
  }

  /** Set author (using the specified store) */
  function setAuthor(IStore _store, uint32 x, uint32 y, address author) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((author)));
  }

  /** Get the full data */
  function get(uint32 x, uint32 y) internal view returns (Grid2DData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint32 x, uint32 y) internal view returns (Grid2DData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint32 x, uint32 y, bool isOccupied, bytes memory data, address author) internal {
    bytes memory _data = encode(isOccupied, data, author);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, uint32 x, uint32 y, bool isOccupied, bytes memory data, address author) internal {
    bytes memory _data = encode(isOccupied, data, author);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint32 x, uint32 y, Grid2DData memory _table) internal {
    set(x, y, _table.isOccupied, _table.data, _table.author);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint32 x, uint32 y, Grid2DData memory _table) internal {
    set(_store, x, y, _table.isOccupied, _table.data, _table.author);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (Grid2DData memory _table) {
    // 21 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 21));

    _table.isOccupied = (_toBool(uint8(Bytes.slice1(_blob, 0))));

    _table.author = (address(Bytes.slice20(_blob, 1)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 21) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 53;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.data = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(bool isOccupied, bytes memory data, address author) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(data).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(isOccupied, author, _encodedLengths.unwrap(), bytes((data)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint32 x, uint32 y) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256((x)));
    _keyTuple[1] = bytes32(uint256((y)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
