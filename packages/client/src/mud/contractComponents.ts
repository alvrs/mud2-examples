/* Autogenerated file. Do not edit manually. */

import { TableId } from "@latticexyz/utils";
import { defineComponent, Type as RecsType, World } from "@latticexyz/recs";

export function defineContractComponents(world: World) {
  return {
    Counter: (() => {
      const tableId = new TableId("testing", "Counter");
      return defineComponent(
        world,
        {
          counterValue: RecsType.Number,
          counterValueSquared: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    TestData: (() => {
      const tableId = new TableId("testing", "TestData");
      return defineComponent(
        world,
        {
          testUint32: RecsType.Number,
          testBytes32: RecsType.String,
          testString: RecsType.String,
          testUint32Array: RecsType.NumberArray,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    TestKeyedData: (() => {
      const tableId = new TableId("testing", "TestKeyedData");
      return defineComponent(
        world,
        {
          testUint32: RecsType.Number,
          testBytes32: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    Grid2D: (() => {
      const tableId = new TableId("testing", "Grid2D");
      return defineComponent(
        world,
        {
          isOccupied: RecsType.Boolean,
          author: RecsType.String,
          data: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    GridConstants: (() => {
      const tableId = new TableId("testing", "GridConstants");
      return defineComponent(
        world,
        {
          width: RecsType.Number,
          height: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    NamespaceOwner: (() => {
      const tableId = new TableId("testing", "NamespaceOwner");
      return defineComponent(
        world,
        {
          owner: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    OwnerNamespaces: (() => {
      const tableId = new TableId("testing", "OwnerNamespaces");
      return defineComponent(
        world,
        {
          namespaceIds: RecsType.StringArray,
        },
        {
          metadata: {
            contractId: tableId.toHexString(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
  };
}
